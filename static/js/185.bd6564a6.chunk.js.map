{"version":3,"file":"static/js/185.bd6564a6.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","utils/useContent.js","components/charInfo/CharInfo.js","components/erorrBoundary/ErrorBoundary.js","components/CharSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: 250, height: 250, margin: '0 auto', objectFit: 'contain'}} src={img} alt='Error'/> //process.env.PUBLIC_URL + '/error.gif'\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n    const [char, setChar] = useState([]);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);// random\n        getCharacter(id)\n            .then(onCharLoaded); // Аргумент автоматически добавляется в onCharLoaded()\n    }\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                        onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemsLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemsLoading ? <Component/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <Component/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(130);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 2) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemsLoading(newItemsLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnCard = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n                    <li \n                        className=\"char__item\"\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                        }}\n                        onFocus={() => {\n                            props.onCharSelected(item.id);\n                            focusOnCard(i);\n                        }}\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <TransitionGroup component={'ul'}  className=\"char__grid\">\n                {items}\n            </TransitionGroup>\n        )\n    }\n\n    // const items = renderItems(charList);\n\n    return (\n        <div className=\"char__list\">\n            {setContent(process, () => renderItems(charList), newItemsLoading)}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemsLoading}\n                style={{display: charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/useContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'This character no have comics'}\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {i < 10 ? item.name : null}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form onChange={(e) => !e.target.value ? setChar(null) : null}>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../erorrBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../CharSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n    // const [selectedComics, setComics] = useState(null);\r\n    const [showChar, setShowChar] = useState(false);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n            />\r\n            <title>Marvel information portal</title>\r\n        </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo showChar={showChar} setShowChar={setShowChar} charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, error, request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=e5d7a32905fbb7018faf8f943dc04077';\r\n    const _baseOffset = 130;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name.length > 22 ? char.name.slice(0, 22) + '...' : char.name,\r\n            description: char.description ? char.description.length > 200 ? char.description.slice(0, 200) + '...': char.description : 'There is no information about this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price === 0 ? 'Not Avialable' : comics.prices[0].price,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us',\r\n        }\r\n    }\r\n\r\n    return {loading, \r\n            error, \r\n            getAllCharacters, \r\n            getCharacter, \r\n            clearError, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName, \r\n            process,\r\n            setProcess};\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n            const data = response.json();\r\n\r\n            setLoading(false);\r\n            // setProcess('confirmed');\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;// Выкидываем ошибку\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {loading, error, request, clearError, process, setProcess}\r\n}"],"names":["style","display","width","height","margin","objectFit","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","setContent","process","Component","newItemsLoading","Error","props","charList","setCharList","setNewItemsLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","setProcess","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","renderItems","arr","items","map","item","i","CSSTransition","timeout","classNames","onCharSelected","onFocus","current","forEach","classList","remove","add","focus","tabIndex","ref","el","TransitionGroup","component","disabled","data","comics","charId","ErrorBoundary","state","errorInfo","console","log","this","setState","children","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","onChange","e","target","value","htmlFor","type","placeholder","selectedChar","showChar","setShowChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}